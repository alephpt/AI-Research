COMPLETE: 
 -- test GAN -> CNN
 -- test GAN using the output of the CNN
 -- create function test for the RL using the output of the CNN


#Pending:
define a CARL_Protocol function to adjust n_inputs, n_outputs and n_layers on each evolution of the RC_Protocol, ARL_Protocol and CA_Protocol
define a CARL_Protocol function to adjust the weights and biases on each evolution of the RC_Protocol, ARL_Protocol and CA_Protocol
define a CARL_Protocol function to adjust the generator and discriminator values on each evolution of the RC_Protocol, ARL_Protocol and CA_Protocol
define a CARL_Protocol function to adjust the states, rewards and policies on each evolution of the RC_Protocol, ARL_Protocol and CA_Protocol
define a CARL_Protocol function to control the update functions on evolution of the RC_Protocol, ARL_Protocol and CA_Protocol


# definitions:
        float** generateGANData(protocol->gan, protocol->batch_size);
        float** concatenateRealAndGeneratedData(real_data, generated_data, protocol->batch_size);
        float** evaluateDiscriminator(protocol->gan, discriminator_inputs, protocol->batch_size);
        float** createGeneratorTargets(protocol->batch_size);
        float calculateGeneratorLoss(discriminator_outputs, generator_targets, protocol->batch_size);
        float** calculateGeneratorError(discriminator_outputs, generator_targets, protocol->batch_size);
        void adjustGeneratorWeights(protocol->gan, protocol->generator_error);
        float**  evaluateRL(protocol->rl, rl_inputs, protocol->batch_size);
        float** createRLTargets(protocol->batch_size);
        float calculateRLLoss(rl_outputs, rl_targets, protocol->batch_size);
        float** calculateRLError(rl_outputs, rl_targets, protocol->batch_size);
        void adjustRLWeights(protocol->rl, rl_error);



REMAINING:
// define a functional test to show the CA_Protocol and ARL_Protocol are evolving
// define a function to synchronize the RL protocol with the CNNLayers
// define a function to synchronize the RL protocol with the CNN
// define a function for the RL to self evaluate and grade it's rewards
// define a function for the RL to set new values to initialize the GAN
// create a function test for RL to decide whether the CNN should use the GAN data, or whether the GAN should use the CNN data
// create a functional test for the CNN and RL increasing eachothers performance
// create a functional test to test the GAN, CNN and RL are all communicating with one another
// create a functional test to determine if the RL is learning from the GAN
// create a functional test to determine if the GAN is learning from the RL AI
// create a functional test to determine if the RL is learning from the CNN
// create a functional test to determine if the CNN is learning from the GAN
// create a function for the RL to determine the success of the GAN
// create a function for the RL to determine the success of the CNN
// create a function for the RL to determine the success of the CNNLayers
// create a function for the RC_Protocol to determine the success of the RL predictions and the CNN classification
// create a function for the ARL_Protocol to determine the success of the RL and Generator 
// create a function for the ARL_Protocol to determine the success of the RL and Descriminator
// create a function for the CA_Protocol to provide analysis points for the CARL Protocol to determin the success of the GAN and CNN
// create a CNN function to increase the performance of the RL
// create a RL function to increase the performance of the CNN
// create a CARL_Protocol function to use the CA_Protocol and ARL_Protocol to increase the performance of the GAN





syncCNNandDiscriminator(generator, discriminator) 
    Verify that the number of inputs and outputs for the generator and discriminator match.
    Copy the weights and biases of the generator's CNN layers to the corresponding layers in the discriminator.
    Update the learning rate of the discriminator to match that of the generator.
    Iterate through each layer of the generator and update the layer sizes, filter sizes, and number of filters in the corresponding layers of the discriminator.
    Finally, update the input and output pointers of the discriminator to match those of the generator.